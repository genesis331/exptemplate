{"version":3,"sources":["assets/LOGO-WHITE-WEB.svg","pages/project.js","pages/overview.js","App.js","serviceWorker.js","index.js","assets/LOGO-BLACK-WEB.svg"],"names":["module","exports","Project","className","Overview","App","useState","logoblack","logoDisplay","setLogoDisplay","themeType","setThemeType","mode","useLightSwitch","useEffect","Mode","Dark","logowhite","theme","type","size","h5","small","src","alt","draggable","title","content","b","initialValue","style","width","Item","label","h6","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,4C,yOCS5BC,MANf,WACI,OACI,yBAAKC,UAAU,a,OCIRC,MANf,WACI,OACI,yBAAKD,UAAU,c,4DC4DRE,MAtDf,WAAgB,IAAD,EAC2BC,mBAASC,KADpC,mBACJC,EADI,KACSC,EADT,OAEuBH,mBAAS,SAFhC,mBAEJI,EAFI,KAEOC,EAFP,KAGLC,EAAOC,2BAWb,OAVAC,qBAAU,WACFF,IAASG,OAAKC,MACdL,EAAa,QACbF,EAAeQ,OAEfN,EAAa,SACbF,EAAeF,QAErB,CAACK,IAGC,kBAAC,gBAAD,CAAeM,MAAO,CAAEC,KAAMT,IAC1B,kBAAC,cAAD,MACA,yBAAKP,UAAU,QACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,uBACX,kBAAC,eAAD,CAAciB,KAAK,SACnB,kBAAC,OAAD,CAAMC,IAAE,GAAR,+BACA,kBAAC,SAAD,MACA,kBAAC,OAAD,CAAMF,KAAK,YAAYG,OAAK,GAA5B,mDAGR,yBAAKnB,UAAU,UACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,iBACX,yBAAKoB,IAAKf,EAAagB,IAAI,OAAOC,WAAW,KAEjD,yBAAKtB,UAAU,kBACX,kBAAC,cAAD,CAAauB,MAAM,eAAeC,QAAS,kBAAC,OAAD,CAAMC,GAAC,EAACR,KAAK,WAAb,qBAGnD,yBAAKjB,UAAU,cAInB,yBAAKA,UAAU,WACX,kBAAC,OAAD,CAAM0B,aAAa,IAAIC,MAAO,CAAEC,MAAO,SACnC,kBAAC,OAAKC,KAAN,CAAWC,MAAO,kBAAC,OAAD,CAAMC,IAAE,GAAR,YAA0BC,MAAM,KAC9C,kBAAC,EAAD,OAEJ,kBAAC,OAAKH,KAAN,CAAWC,MAAO,kBAAC,OAAD,CAAMC,IAAE,GAAR,WAAyBC,MAAM,KAC7C,kBAAC,EAAD,YC5CRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BtD,EAAOC,QAAU,IAA0B,6C","file":"static/js/main.504eee31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LOGO-WHITE-WEB.e0852cb2.svg\";","import React from 'react';\nimport './project.css';\n\nfunction Project() {\n    return (\n        <div className=\"project\"></div>\n    );\n}\n\nexport default Project;","import React from 'react';\nimport './overview.css';\n\nfunction Overview() {\n    return (\n        <div className=\"overview\"></div>\n    );\n}\n\nexport default Overview;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Project from './pages/project';\nimport Overview from './pages/overview';\nimport { GeistProvider, CssBaseline } from '@geist-ui/react';\nimport { Mode, useLightSwitch } from 'use-light-switch';\nimport { Note, Spacer, Description, Tabs, Text } from '@geist-ui/react';\nimport { AlertOctagon } from '@geist-ui/react-icons';\nimport logoblack from './assets/LOGO-BLACK-WEB.svg';\nimport logowhite from './assets/LOGO-WHITE-WEB.svg';\n\nfunction App() {\n    const [logoDisplay, setLogoDisplay] = useState(logoblack);\n    const [themeType, setThemeType] = useState('light');\n    const mode = useLightSwitch();\n    useEffect(() => {\n        if (mode === Mode.Dark) {\n            setThemeType('dark');\n            setLogoDisplay(logowhite);\n        } else {\n            setThemeType('light');\n            setLogoDisplay(logoblack);\n        }\n    },[mode]);\n\n    return (\n        <GeistProvider theme={{ type: themeType }}>\n            <CssBaseline />\n            <div className=\"base\">\n                <div className=\"mobile-block\">\n                    <div className=\"mobile-block-center\">\n                        <AlertOctagon size=\"4rem\"/>\n                        <Text h5>Unsupported device detected</Text>\n                        <Spacer/>\n                        <Note type=\"secondary\" small>Visit this website in a larger screen device.</Note>\n                    </div>\n                </div>\n                <div className=\"header\">\n                    <div className=\"header-1\">\n                        <div className=\"header-1-logo\">\n                            <img src={logoDisplay} alt=\"Logo\" draggable={false}/>\n                        </div>\n                        <div className=\"header-1-title\">\n                            <Description title=\"Project Type\" content={<Text b size=\"1.25rem\">Project Title</Text>}/>\n                        </div>\n                    </div>\n                    <div className=\"header-2\">\n                    \n                    </div>\n                </div>\n                <div className=\"content\">\n                    <Tabs initialValue=\"1\" style={{ width: \"100%\" }}>\n                        <Tabs.Item label={<Text h6>Overview</Text>} value=\"1\">\n                            <Overview />\n                        </Tabs.Item>\n                        <Tabs.Item label={<Text h6>Project</Text>} value=\"2\">\n                            <Project />\n                        </Tabs.Item>\n                    </Tabs>\n                </div>\n            </div>\n        </GeistProvider>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();","module.exports = __webpack_public_path__ + \"static/media/LOGO-BLACK-WEB.bc966552.svg\";"],"sourceRoot":""}